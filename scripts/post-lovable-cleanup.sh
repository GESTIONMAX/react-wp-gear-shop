#!/bin/bash

# üßπ Script de Nettoyage Post-Lovable
# Ce script automatise le nettoyage d'un projet export√© depuis Lovable

set -e

echo "üöÄ D√©but du nettoyage post-Lovable..."
echo "======================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage
print_step() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier qu'on est dans un projet Node.js
if [ ! -f "package.json" ]; then
    print_error "package.json non trouv√©. Ex√©cutez ce script depuis la racine du projet."
    exit 1
fi

# 1. Audit initial
print_step "Audit initial des d√©pendances..."
echo "Vuln√©rabilit√©s avant nettoyage :"
npm audit --audit-level=moderate || true
echo ""

# 2. Identifier les d√©pendances Lovable
print_step "Identification des d√©pendances Lovable..."
if npm list | grep -i lovable > /dev/null 2>&1; then
    echo "D√©pendances Lovable trouv√©es :"
    npm list | grep -i lovable
else
    print_success "Aucune d√©pendance Lovable trouv√©e"
fi
echo ""

# 3. Supprimer lovable-tagger
print_step "Suppression de lovable-tagger..."
if npm list lovable-tagger > /dev/null 2>&1; then
    npm uninstall lovable-tagger
    print_success "lovable-tagger supprim√©"
else
    print_success "lovable-tagger d√©j√† absent"
fi

# 4. Nettoyer vite.config.ts
print_step "Nettoyage de vite.config.ts..."
if [ -f "vite.config.ts" ]; then
    if grep -q "lovable-tagger" vite.config.ts; then
        # Backup
        cp vite.config.ts vite.config.ts.backup

        # Supprimer l'import
        sed -i '/import.*lovable-tagger/d' vite.config.ts

        # Simplifier les plugins
        sed -i 's/plugins: \[react(), mode === "development" && componentTagger()\]\.filter(Boolean),/plugins: [react()],/' vite.config.ts

        print_success "vite.config.ts nettoy√© (backup cr√©√©)"
    else
        print_success "vite.config.ts d√©j√† propre"
    fi
fi

# 5. Mettre √† jour les d√©pendances vuln√©rables
print_step "Mise √† jour des d√©pendances de s√©curit√©..."
npm install esbuild@latest vite@latest @vitejs/plugin-react-swc@latest
print_success "D√©pendances mises √† jour"

# 6. Nettoyer index.html
print_step "Nettoyage des m√©tadonn√©es index.html..."
if [ -f "index.html" ]; then
    if grep -q "Lovable\|lovable" index.html; then
        # Backup
        cp index.html index.html.backup

        # Replacements (√† adapter selon les besoins)
        sed -i 's/content="Lovable"/content="MyTechGear"/' index.html
        sed -i 's/content="Lovable Generated Project"/content="D√©couvrez notre s√©lection de produits technologiques premium"/' index.html
        sed -i 's|https://lovable.dev/opengraph-image-p98pqg.png|/hero-smart-glasses.jpg|g' index.html
        sed -i 's/@lovable_dev/@mytechgear/' index.html

        print_success "index.html nettoy√© (backup cr√©√©)"
    else
        print_success "index.html d√©j√† propre"
    fi
fi

# 7. Recherche de r√©f√©rences restantes
print_step "Recherche de r√©f√©rences Lovable restantes..."

echo "Dans le code source :"
if find src/ -type f \( -name "*.ts" -o -name "*.tsx" \) -exec grep -l "lovable\|@lovable\|data-component-id" {} \; 2>/dev/null | head -5; then
    print_warning "R√©f√©rences trouv√©es - v√©rification manuelle n√©cessaire"
else
    print_success "Aucune r√©f√©rence trouv√©e dans le code source"
fi

# 8. Build et tests
print_step "Build et tests de validation..."

echo "Build de production..."
if npm run build; then
    print_success "Build r√©ussi"
else
    print_error "Build √©chou√©"
    exit 1
fi

echo "Tests unitaires..."
if npm run test; then
    print_success "Tests r√©ussis"
else
    print_warning "Tests √©chou√©s ou non configur√©s"
fi

# 9. V√©rification du build final
print_step "V√©rification du build final..."
if [ -d "dist" ]; then
    if grep -r "lovable\|data-component-id" dist/ > /dev/null 2>&1; then
        print_warning "Traces Lovable d√©tect√©es dans le build"
        echo "Fichiers concern√©s :"
        grep -r "lovable\|data-component-id" dist/ | head -3
    else
        print_success "Build propre - aucune trace Lovable"
    fi
fi

# 10. Audit final
print_step "Audit de s√©curit√© final..."
echo "Vuln√©rabilit√©s apr√®s nettoyage :"
if npm audit --audit-level=moderate; then
    print_success "Aucune vuln√©rabilit√© d√©tect√©e"
else
    print_warning "Vuln√©rabilit√©s encore pr√©sentes - v√©rification manuelle n√©cessaire"
fi

# 11. R√©sum√©
echo ""
echo "======================================="
echo -e "${GREEN}üéâ Nettoyage post-Lovable termin√© !${NC}"
echo ""
echo "üìã R√©sum√© des actions :"
echo "  ‚úÖ D√©pendances Lovable supprim√©es"
echo "  ‚úÖ Configuration Vite nettoy√©e"
echo "  ‚úÖ M√©tadonn√©es HTML personnalis√©es"
echo "  ‚úÖ D√©pendances de s√©curit√© mises √† jour"
echo "  ‚úÖ Build et tests valid√©s"
echo ""
echo "üìö Consultez la documentation compl√®te :"
echo "  - docs/post-lovable-checklist.md"
echo "  - docs/quick-commands.md"
echo ""
echo "‚ö†Ô∏è  N'oubliez pas de :"
echo "  1. V√©rifier manuellement les fichiers de backup (.backup)"
echo "  2. Adapter les m√©tadonn√©es √† votre projet"
echo "  3. Tester l'application en mode d√©veloppement"
echo "  4. Effectuer un commit des changements"
echo ""

# Proposer de d√©marrer le serveur de dev
read -p "Voulez-vous d√©marrer le serveur de d√©veloppement ? (y/N) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_step "D√©marrage du serveur de d√©veloppement..."
    npm run dev
fi