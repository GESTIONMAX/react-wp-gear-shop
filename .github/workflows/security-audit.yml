---
name: 🔒 Security Audit & Build

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  schedule:
    # Audit automatique tous les lundi à 8h00 UTC
    - cron: '0 8 * * 1'
  workflow_dispatch:  # Permet le déclenchement manuel

env:
  NODE_VERSION: '18'
  FORCE_COLOR: 1

jobs:
  security-audit:
    name: 🔍 Security Audit
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci --audit --fund false
          npm ls --depth=0

      - name: 🔍 Run npm audit
        run: |
          echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level=moderate || echo "⚠️ Vulnerabilities found"

          # Générer rapport JSON
          npm audit --json > audit-report.json || true

          # Compter les vulnérabilités
          VULN_COUNT=$(cat audit-report.json | \
            jq '.metadata.vulnerabilities.total // 0')
          echo "Total vulnerabilities: $VULN_COUNT" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Check outdated packages
        run: |
          echo "## 📦 Outdated Packages" >> $GITHUB_STEP_SUMMARY
          npm outdated --depth=0 >> outdated.txt || true
          if [ -s outdated.txt ]; then
            echo "⚠️ Outdated packages found:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 outdated.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ All packages up to date" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔒 Security headers check
        run: |
          echo "## 🛡️ Security Configuration" >> $GITHUB_STEP_SUMMARY

          # Vérifier CSP dans index.html
          if grep -q "Content-Security-Policy" index.html; then
            echo "✅ Content Security Policy configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ No CSP found" >> $GITHUB_STEP_SUMMARY
          fi

          # Vérifier les headers de sécurité dans vite.config.ts
          if grep -q "X-Frame-Options" vite.config.ts; then
            echo "✅ Security headers configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security headers missing" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📤 Upload audit artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-${{ github.sha }}
          path: |
            audit-report.json
            outdated.txt
          retention-days: 30

  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: security-audit

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --fund false

      - name: 🔍 Lint code
        run: npm run lint || echo "⚠️ Lint errors found but continuing build"

      - name: 🧪 Run tests
        run: npm run test

      - name: 🏗️ Build application
        run: npm run build
        env:
          # Variables d'environnement pour le build
          VITE_SUPABASE_URL: ${{ vars.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ vars.VITE_SUPABASE_PUBLISHABLE_KEY }}

      - name: 🔍 Verify build security
        run: |
          echo "## 🔍 Build Security Check" >> $GITHUB_STEP_SUMMARY

          # Vérifier qu'aucun secret n'est dans le build
          if grep -r "sk_" dist/ || grep -r "secret" dist/ || \
            grep -r "private" dist/; then
            echo "❌ Potential secrets found in build" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ No secrets detected in build" >> $GITHUB_STEP_SUMMARY
          fi

          # Vérifier la taille du bundle
          BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
          echo "📦 Bundle size: $BUNDLE_SIZE" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == 18
        with:
          name: build-${{ github.sha }}
          path: dist/
          retention-days: 7

  security-scan:
    name: 🛡️ Advanced Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
