---
name: 🚀 Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'

jobs:
  security-check:
    name: 🔒 Pre-deployment Security Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --fund false

      - name: 🔍 Critical security audit
        run: |
          # Vérification critique avant déploiement
          if npm audit --audit-level=critical; then
            echo "✅ No critical vulnerabilities"
          else
            echo "❌ Critical vulnerabilities found - deployment blocked"
            exit 1
          fi

      - name: 🔍 Environment variables check
        run: |
          # Vérifier que les variables d'environnement sont définies
          if [ -z "${{ secrets.VITE_SUPABASE_URL }}" ]; then
            echo "❌ VITE_SUPABASE_URL not configured"
            exit 1
          fi

          if [ -z "${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}" ]; then
            echo "❌ VITE_SUPABASE_PUBLISHABLE_KEY not configured"
            exit 1
          fi

          echo "✅ Environment variables configured"

  build:
    name: 🏗️ Build for Production
    runs-on: ubuntu-latest
    needs: security-check

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --fund false

      - name: 🧪 Run tests
        run: npm run test

      - name: 🏗️ Build for production
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}

      - name: 🔍 Post-build security check
        run: |
          # Patterns de détection de secrets réels pour production
          SECRET_PATTERNS=(
            "sk_[a-zA-Z0-9_]{20,}"              # Stripe secret keys
            "pk_test_[a-zA-Z0-9_]{20,}"         # Stripe test keys
            "pk_live_[a-zA-Z0-9_]{20,}"         # Stripe live keys
            "eyJ[a-zA-Z0-9_-]+\.[a-zA-Z0-9_-]+\.[a-zA-Z0-9_-]+" # JWT tokens
            "(?:password|secret|key|token)\s*[=:]\s*[\"'][^\"']{10,}[\"']" # Explicit secret assignments
            "ghp_[a-zA-Z0-9_]{36}"              # GitHub tokens
            "xoxb-[a-zA-Z0-9_-]+"               # Slack bot tokens
          )

          SECRETS_FOUND=false
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if find dist/ -type f \( -name "*.js" -o -name "*.html" -o -name "*.css" \) \
              -exec grep -l -E "$pattern" {} \; 2>/dev/null | head -1; then
              echo "❌ Potential secret found with pattern: $pattern"
              SECRETS_FOUND=true
            fi
          done

          if [ "$SECRETS_FOUND" = "true" ]; then
            echo "❌ Secrets detected in build output"
            exit 1
          fi

          # Vérifier la taille du bundle
          TOTAL_SIZE=$(du -sb dist/ | cut -f1)
          if [ $TOTAL_SIZE -gt 52428800 ]; then # 50MB
            echo "⚠️ Bundle size is large: $(du -sh dist/)"
          fi

          echo "✅ Build security check passed"

      - name: 📤 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 7

  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: production-build
          path: dist/

      - name: 🚀 Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v41.1.4
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}

      - name: 🔍 Post-deployment health check
        run: |
          # Attendre que le déploiement soit accessible
          sleep 30

          # Vérifier que le site répond
          URL="${{ steps.deploy.outputs.url }}"
          if curl -f -s "$URL" > /dev/null; then
            echo "✅ Deployment accessible at $URL"
          else
            echo "❌ Deployment health check failed"
            exit 1
          fi

      - name: 📊 Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          ENV_NAME="${{ github.event.inputs.environment || 'production' }}"
          DEPLOY_URL="${{ steps.deploy.outputs.url }}"
          echo "- **Environment**: $ENV_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: $DEPLOY_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy time**: $(date)" >> $GITHUB_STEP_SUMMARY

          # Set deployment URL for environment (post-deployment)
          echo "DEPLOYMENT_URL=$DEPLOY_URL" >> $GITHUB_OUTPUT
